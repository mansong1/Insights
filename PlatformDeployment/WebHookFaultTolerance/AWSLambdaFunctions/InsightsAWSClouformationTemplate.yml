AWSTemplateFormatVersion: '2010-09-09'
Description: Insights WebHook Fault Tollerance template
Parameters:
  FunctionBucketName:
    Description: 'Artifacts Bucket name'
    Type: String
    Default: ''
  InsightsKinesisFunctionName:
    Description: 'Insights Function Artifacts name'
    Type: String
    Default: ''
  InsightsRetrievalFunctionName:
    Description: 'Insights Retrieval Function Artifacts name'
    Type: String
    Default: ''
Conditions:
  HasBucketName: !Not [!Equals [!Ref FunctionBucketName, '']]
  HasArtifact1: !Not [!Equals [!Ref InsightsKinesisFunctionName, '']]
  HasArtifact2: !Not [!Equals [!Ref InsightsRetrievalFunctionName, '']]
Outputs:
  APIDomainNameWithStage:
    Description: 'API end-point URL'
    Value: !Sub 'https://${InsightsAPI}.execute-api.${AWS::Region}.amazonaws.com/insights' 
Resources:
  InsightsBucket:
    Type: AWS::S3::Bucket
  InsightsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: InsightsKinesisFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
        - PolicyName: InsightsRetrievalPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - !GetAtt InsightsBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt InsightsBucket.Arn
                    - '/*'
  InsightsKinesisFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref FunctionBucketName
        S3Key: !Ref InsightsKinesisFunctionName
      Environment:
        Variables:
          connectionTimeout: 15000
          maintenanceMode: false
      Description: Insights Lambda function for Kinesis
      Handler: com.cognizant.devops.insightskinesis.LambdaFunctionHandler
      MemorySize: 512
      Role: !GetAtt InsightsLambdaRole.Arn
      Runtime: java8
      Timeout: 60
  InsightsKinesisFunctionConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties: 
      FunctionName: !Ref InsightsKinesisFunction
      MaximumEventAgeInSeconds: 60
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
  InsightsRetrievalTrigger:
    Type: AWS::Events::Rule
    Properties: 
      Description: 'CloudWatch triggrer for InsightsRetrieval function'
      ScheduleExpression: 'rate(10 minutes)'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt InsightsRetrievalFunction.Arn
          Id: "insightsretrieval_trigger"
  InsightsRetrievalTriggerPermission: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !Ref InsightsRetrievalFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt InsightsRetrievalTrigger.Arn
  InsightsRetrievalFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref FunctionBucketName
        S3Key: !Ref InsightsRetrievalFunctionName
      Environment:
        Variables:
          s3BucketName: !Ref InsightsBucket
          s3BucketRegion: !Ref 'AWS::Region'
          connectionTimeout: 15000
      Description: Insights Lambda function for Kinesis
      Handler: com.cognizant.devops.insightsretrieval.LambdaFunctionHandler
      MemorySize: 512
      Role: !GetAtt InsightsLambdaRole.Arn
      Runtime: java8
      Timeout: 60
  InsightsRetrievalFunctionConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties: 
      FunctionName: !Ref InsightsRetrievalFunction
      MaximumEventAgeInSeconds: 60
      MaximumRetryAttempts: 0
      Qualifier: $LATEST
  InsightsKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: InsightsKinesisPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:AbortMultipartUpload
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:PutObject
              Resource:
                - !GetAtt InsightsBucket.Arn
                - !Join
                  - ''
                  - - !GetAtt InsightsBucket.Arn
                    - '/*'
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
                - lambda:GetFunctionConfiguration
              Resource: !GetAtt InsightsKinesisFunction.Arn
            - Effect: Allow
              Action: 'logs:PutLogEvents'
              Resource: 
                - !Join 
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - 'log-group:/aws/kinesisfirehose/InsightsFirehose:log-stream:*'
            - Effect: Allow
              Action: 'glue:GetTableVersions'
              Resource: '*'
  InsightsFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt InsightsBucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: UNCOMPRESSED
        ErrorOutputPrefix: function-failed/
        Prefix: connection-failed/
        ProcessingConfiguration:
          Enabled: True
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt InsightsKinesisFunction.Arn
                - ParameterName: BufferSizeInMBs
                  ParameterValue: 1
                - ParameterName: BufferIntervalInSeconds
                  ParameterValue: 60
                - ParameterName: NumberOfRetries 
                  ParameterValue: 0
        S3BackupConfiguration:
          BucketARN: !GetAtt InsightsBucket.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
          CompressionFormat: UNCOMPRESSED
          Prefix: source_backup/
          RoleARN: !GetAtt InsightsKinesisRole.Arn
        S3BackupMode: Enabled
        RoleARN: !GetAtt InsightsKinesisRole.Arn
  InsightsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Join:
        - ""
        - - Ref: AWS::StackName
          - "-InsightsAPI"
      EndpointConfiguration:
        Types:
          - REGIONAL
  InsightsAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt InsightsAPI.RootResourceId
      RestApiId: !Ref InsightsAPI
      PathPart: '{tool-name}'
  InsightsAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        Credentials: !GetAtt InsightsAPIRole.Arn
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":firehose:action/PutRecord"
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json:
            Fn::Join:
              - ""
              - - "{\n" #begin of the Firehose request json
                - "\"DeliveryStreamName\": \""
                - Ref: InsightsFirehose
                - "\",\n"
                - " \"Record\": { \"Data\": \"$util.base64Encode({\"body\":\"$input.json('$')\",\"tool\":\"$input.params('tool-name')\"})\" }\n}"
        RequestParameters: 
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"status":"OK"}'
      MethodResponses:
        - StatusCode: 200
      ResourceId: !Ref InsightsAPIResource
      RestApiId: !Ref InsightsAPI
  InsightsAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: InsightsAPIPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - firehose:PutRecord
              Resource: "*"
  InsightsAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - InsightsAPIResource
      - InsightsAPIMethod
    Properties:
      RestApiId: !Ref InsightsAPI
      StageName: insights